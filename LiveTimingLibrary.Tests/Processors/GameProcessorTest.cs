using Moq;

public class TestGameProcessor()
{
    [Fact]
    public void TestReturnDirectlyWhenGameIsNotRunning()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, "test");

        var gameData = new TestableGameData
        {
            GameRunning = false,
            NewData = new TestableStatusDataBase
            {
                SessionName = "Race",
                Opponents = [
                    new TestableOpponent
                    {
                        IsPlayer = true,
                        CurrentLap = 2,
                        CurrentSector = 3,
                        CurrentLapTime = TimeSpan.Parse("00:00:01.4100000")
                    }
                ]
            }
        };

        // GameRunning is false, therefore it shouldn't do anything
        processor.Run(gameData);
        mockPropertyManager.Verify(m => m.Add("SessionType", SessionType.Race.ToString()), Times.Never());

        // now GameRunning is true which should execute the update cycle
        gameData.GameRunning = true;
        processor.Run(gameData);
        mockPropertyManager.Verify(m => m.Add("SessionType", SessionType.Race.ToString()), Times.Once());
    }

    [Fact]
    public void TestHandleSessionIdChange()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, "test");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            NewData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Qualifying",
                Opponents = [
                    new TestableOpponent
                    {
                        IsPlayer = true,
                        CurrentLap = 2,
                        CurrentSector = 3,
                        CurrentLapTime = TimeSpan.Parse("00:00:01.4100000")
                    }
                ]
            }
        };

        // SessionId is empty initial, which shouldn't be treated as a session id change
        processor.Run(gameData);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Never());
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Never());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Never());

        // Run Processor with the same data again.
        // SessionId shouldn't have changed (SessionId will be generated by the three parameters GameName, TrackName and SessionName)
        processor.Run(gameData);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Never());
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Never());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Never());

        // new SessionName -> should handle session change
        gameData.NewData.SessionName = "Race";
        processor.Run(gameData);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore("d8248d7cce41618d2caea0ac66ae8870"), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore("d8248d7cce41618d2caea0ac66ae8870"), Times.Once());

        // new TrackName -> -> should handle session change again
        gameData.NewData.TrackName = "Testtrack new";
        processor.Run(gameData);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore("f224e61defd9deeb6564d121c8ef32de"), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore("f224e61defd9deeb6564d121c8ef32de"), Times.Once());

        // new GameName -> -> should handle session change again
        gameData.NewData.GameName = "Testgame new";
        processor.Run(gameData);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Exactly(3));
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Exactly(3));
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore("efb68506f6b670aa816fa1bcc3cf9f60"), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Exactly(3));
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore("efb68506f6b670aa816fa1bcc3cf9f60"), Times.Once());
    }

    [Fact]
    public void TestHandleSessionReload()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, "test");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            NewData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Race",
                Opponents = [
                    new TestableOpponent
                    {
                        Position = 1,
                        CarNumber = "107",
                        IsPlayer = true,
                        CurrentLap = 2,
                        CurrentSector = 3,
                        CurrentLapTime = TimeSpan.Parse("00:00:01.4100000")
                    },
                    new TestableOpponent
                    {
                        Position = 2,
                        CarNumber = "108",
                        IsPlayer = false,
                        CurrentLap = 2,
                        CurrentSector = 3,
                        CurrentLapTime = TimeSpan.Parse("00:00:01.4120000")
                    }
                ]
            }
        };

        // Old data is null -> no session reload
        processor.Run(gameData);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<SessionReloadEvent>()), Times.Never());

        // Old data is set, but the CurrentLap in the OldData (1) is less than the CurrentLap in NewData (2)
        gameData.OldData = new TestableStatusDataBase
        {
            Opponents = [
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 1,
                    CurrentLapTime = TimeSpan.Parse("00:01:38.9990000")
                },
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 1,
                    CurrentLapTime = TimeSpan.Parse("00:01:31.3970000")
                }
            ]
        };
        processor.Run(gameData);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<SessionReloadEvent>()), Times.Never());

        // CurrentLap is the same, but the CurrentLapTime in NewData is greater than in OldData
        gameData.OldData.Opponents[1].CurrentLap = 2;
        gameData.OldData.Opponents[1].CurrentLapTime = TimeSpan.Parse("00:00:00.9850000");
        processor.Run(gameData);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<SessionReloadEvent>()), Times.Never());

        // Now the CurrentLapTime in OldData is greater than in NewData -> reload
        gameData.OldData.Opponents[1].CurrentLapTime = TimeSpan.Parse("00:00:04.9850000");
        processor.Run(gameData);
        SessionReloadEvent expected = new("d8248d7cce41618d2caea0ac66ae8870", 2);
        mockRaceEventHandler.Verify(m => m.AddEvent(expected), Times.Once());

        // Now the CurrentLap in OldData is greater than in NewData -> reload
        gameData.NewData.Opponents[0].CurrentLap = 5;
        gameData.OldData.Opponents[1].CurrentLap = 9;
        processor.Run(gameData);
        expected = new("d8248d7cce41618d2caea0ac66ae8870", 5);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<SessionReloadEvent>()), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.AddEvent(expected), Times.Once());
    }

    [Fact]
    public void TestUpdateCurrentLapTimeInLapEventStore()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, "test");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            NewData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Race",
                Opponents = [
                new TestableOpponent
                    {
                        IsPlayer = true,
                        CurrentLap = 2,
                        CurrentSector = 3,
                        CurrentLapTime = TimeSpan.Parse("00:00:01.4100000")
                    }
            ]
            },
            OldData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Race",
                Opponents = [
                    new TestableOpponent
                    {
                        IsPlayer = true,
                        CurrentLap = 2,
                        CurrentSector = 3,
                        CurrentLapTime = TimeSpan.Parse("00:00:01.3150000")
                    }
                ]
            }
        };
        processor.Run(gameData);
        mockRaceEventHandler.Verify(m => m.SetCurrentLapTime(TimeSpan.Parse("00:00:01.4100000")), Times.Once());

        gameData.NewData.Opponents[0].CurrentLapTime = TimeSpan.Parse("00:01:20.1930000");
        processor.Run(gameData);
        mockRaceEventHandler.Verify(m => m.SetCurrentLapTime(It.IsAny<TimeSpan>()), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.SetCurrentLapTime(TimeSpan.Parse("00:01:20.1930000")), Times.Once());
    }

    [Fact]
    public void TestProcessEntries()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, "test");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            NewData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Race",
                CurrentLap = 2,
                CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                Opponents = [
                    new TestableOpponent
                        {
                            CarNumber = "107",
                            Position = 1,
                            CurrentLap = 2,
                            IsPlayer = true,
                            CurrentSector = 3,
                            CurrentLapTime = TimeSpan.Parse("00:00:01.3150000")
                        },
                        new TestableOpponent
                        {
                            CarNumber = "108",
                            Position = 2,
                            CurrentLap = 2,
                            IsPlayer = false,
                        },
                        new TestableOpponent
                        {
                            CarNumber = "109",
                            Position = 3,
                            CurrentLap = 4,
                            IsPlayer = false,
                        }
                ]
            },
            OldData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Race",
                Opponents = [
                    new TestableOpponent
                        {
                            CarNumber = "109",
                            Position = 1,
                            CurrentLap = 3,
                            IsPlayer = false,
                        },
                        new TestableOpponent
                        {
                            CarNumber = "110",
                            Position = 2,
                            CurrentLap = 2,
                            IsPlayer = false,
                        },
                        new TestableOpponent
                        {
                            CarNumber = "107",
                            Position = 3,
                            CurrentLap = 1,
                            IsPlayer = true,
                            CurrentSector = 3,
                            CurrentLapTime = TimeSpan.Parse("00:00:01.3090000")
                        },
                    ]
            }
        };
        processor.Run(gameData);
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "d8248d7cce41618d2caea0ac66ae8870",
                SessionType.Race,
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<FastestFragmentTimesStore>()
            ),
            Times.Exactly(3)
        );

        // CarNumber 107
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "d8248d7cce41618d2caea0ac66ae8870",
                SessionType.Race,
                gameData.NewData.Opponents[0],
                gameData.OldData.Opponents[2],
                null,
                null,
                It.IsAny<FastestFragmentTimesStore>()
            ),
            Times.Once()
        );

        // CarNumber 108
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "d8248d7cce41618d2caea0ac66ae8870",
                SessionType.Race,
                gameData.NewData.Opponents[1],
                null,
                gameData.NewData.Opponents[0],
                gameData.NewData.Opponents[0],
                It.IsAny<FastestFragmentTimesStore>()
            ),
            Times.Once()
        );

        // CarNumber 109
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "d8248d7cce41618d2caea0ac66ae8870",
                SessionType.Race,
                gameData.NewData.Opponents[2],
                gameData.OldData.Opponents[0],
                gameData.NewData.Opponents[0],
                gameData.NewData.Opponents[1],
                It.IsAny<FastestFragmentTimesStore>()
            ),
            Times.Once()
        );
    }

    [Fact]
    public void TestNormalizeEntryData()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, "test");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            NewData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Race",
                Opponents = [
                    new TestableOpponent
                        {
                            CarNumber = "107",
                            Position = 1,
                            CurrentLap = 2,
                            CurrentSector = 1,
                            IsPlayer = true,
                            CurrentLapTime = TimeSpan.Parse("00:00:01.3150000")
                        }
                ]
            },
            OldData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Race",
                Opponents = [
                    new TestableOpponent
                        {
                            CarNumber = "107",
                            Position = 3,
                            CurrentLap = 2,
                            CurrentSector = 3,
                            IsPlayer = true,
                            CurrentLapTime = TimeSpan.Parse("00:00:01.3170000")
                        }
                ]
            }
        };
        processor.Run(gameData);

        // Should use OldData as NewData, when the CurrentLap/CurrentSector in OldData is higher than in NewData
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "d8248d7cce41618d2caea0ac66ae8870",
                SessionType.Race,
                gameData.OldData.Opponents[0],
                gameData.OldData.Opponents[0],
                null,
                null,
                It.IsAny<FastestFragmentTimesStore>()
            ),
            Times.Once()
        );
    }

    [Fact]
    public void TestShouldThrowWhenPlayerDataCannotBeFound()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, "test");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            NewData = new TestableStatusDataBase
            {
                GameName = "Testgame",
                TrackName = "Testtrack",
                SessionName = "Race",
                Opponents = [
                    new TestableOpponent
                    {
                        CarNumber = "107",
                        Position = 1,
                        CurrentLap = 2,
                        CurrentSector = 1,
                        IsPlayer = false,
                        CurrentLapTime = TimeSpan.Parse("00:00:01.3150000")
                    },
                    new TestableOpponent
                    {
                        CarNumber = "108",
                        Position = 2,
                        CurrentLap = 2,
                        CurrentSector = 1,
                        IsPlayer = false,
                        CurrentLapTime = TimeSpan.Parse("00:00:01.3170000")
                    }
                ]
            }
        };

        Assert.Throws<Exception>(() => processor.Run(gameData));
    }
}
