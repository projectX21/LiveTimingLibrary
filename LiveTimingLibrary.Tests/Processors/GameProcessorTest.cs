using Moq;

public class GameProcessorTest()
{
    [Fact]
    public void TestHandleSessionIdChange()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var mockEntryProgressStore = new Mock<IEntryProgressStore>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, mockEntryProgressStore.Object, "testgame", "testgame_testtrack");

        var gameData1 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    IsPlayer = true,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes {}
                }
            ]
        };

        // should be called initially in the constructor
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore("testgame_testtrack"), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore("testgame_testtrack"), Times.Once());

        // SessionId is empty initial, which shouldn't be treated as a session id change
        processor.Run(gameData1);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Once());

        // Run Processor with the same data again.
        // SessionId shouldn't have changed (SessionId will be generated by the two parameters GameName and TrackName)
        processor.Run(gameData1);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Once());

        // new TrackName -> -> should handle session change
        var gameData2 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack new",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    IsPlayer = true,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes {}
                }
            ]
        };
        processor.Run(gameData2);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore("testgame_testtrack_new"), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore("testgame_testtrack_new"), Times.Once());

        // new GameName -> should handle session change again
        var gameData3 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame New",
            TrackName = "Testtrack new",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    IsPlayer = true,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes {}
                }
            ]
        };
        processor.Run(gameData3);
        mockPropertyManager.Verify(m => m.ResetAll(), Times.Exactly(3));
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore(It.IsAny<string>()), Times.Exactly(3));
        mockRaceEventHandler.Verify(m => m.ReinitPitEventStore("testgame_new_testtrack_new"), Times.Once());
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore(It.IsAny<string>()), Times.Exactly(3));
        mockRaceEventHandler.Verify(m => m.ReinitPlayerFinishedLapEventStore("testgame_new_testtrack_new"), Times.Once());
    }

    [Fact]
    public void TestHandleSessionReload()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var mockEntryProgressStore = new Mock<IEntryProgressStore>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, mockEntryProgressStore.Object, "testgame", "testgame_track");

        var gameData1 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes
                    {
                        FullLap = TimeSpan.Parse("00:01:30.1040000")
                    }
                },
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4120000")
                }
            ]
        };

        // Shouldn't do anything for the first Run() execution, because _previousPlayerData is null initially
        processor.Run(gameData1);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<SessionReloadEvent>()), Times.Never());

        // _previousPlayerData.CurrentLap (2) is less than in _currentPlayerData (3)
        var gameData2 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 3,
                    CurrentSector = 1,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes
                    {
                        FullLap = TimeSpan.Parse("00:01:30.1040000")
                    }
                },
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:02.1030000")
                }
            ]
        };
        processor.Run(gameData2);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<SessionReloadEvent>()), Times.Never());

        // CurrentLap is the same, but the CurrentLapTime in _currentPlayerData is greater than in _previousPlayerData
        var gameData3 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 3,
                    CurrentSector = 1,
                    CurrentLapTime = TimeSpan.Parse("00:00:04.4910000"),
                    LastTimes = new TestableSectorTimes
                    {
                        FullLap = TimeSpan.Parse("00:01:30.1040000")
                    }
                },
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4120000")
                }
            ]
        };
        processor.Run(gameData3);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<SessionReloadEvent>()), Times.Never());

        // Now the CurrentLaptime in _currentPlayerData is less than in _previousPlayerData -> reload
        var gameData4 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 3,
                    CurrentSector = 1,
                    CurrentLapTime = TimeSpan.Parse("00:00:02.5820000"),
                    LastTimes = new TestableSectorTimes
                    {
                        FullLap = TimeSpan.Parse("00:01:30.1040000")
                    }
                },
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4120000")
                }
            ]
        };
        processor.Run(gameData4);
        SessionReloadEvent expected = new("testgame_testtrack", 3);
        mockRaceEventHandler.Verify(m => m.AddEvent(expected), Times.Once());

        // And finally the CurrentLap in _currentPlayerData is less than in _previousPlayerData -> reload
        var gameData5 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes
                    {
                        FullLap = TimeSpan.Parse("00:01:30.1040000")
                    }
                },
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4120000")
                }
            ]
        };
        processor.Run(gameData5);
        expected = new("testgame_testtrack", 2);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<SessionReloadEvent>()), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.AddEvent(expected), Times.Once());
    }

    [Fact]
    public void TestCreatePlayerFinishedLapEventOnPlayerLapNumberChange()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var mockEntryProgressStore = new Mock<IEntryProgressStore>();

        mockRaceEventHandler.Setup(m => m.GetPitDataByEntryId(It.IsAny<string>())).Returns(new EntryPitData("", 0, 0, null, null));
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, mockEntryProgressStore.Object, "testgame", "testgame_track");

        var gameData1 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 0,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes {}
                },
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 0,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4120000"),
                    LastTimes = new TestableSectorTimes {}
                }
            ]
        };
        // Shouldn't create new finished lap when previous data is null
        processor.Run(gameData1);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<PlayerFinishedLapEvent>()), Times.Never());

        // newData.CurrentLap is bigger than oldData.CurrentLap, but newData.CurrentLap isn't greater than 1
        var gameData2 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 1,
                    CurrentSector = 1,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4120000")
                },
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 1,
                    CurrentSector = 1,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes {}
                }
            ]
        };
        processor.Run(gameData2);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<PlayerFinishedLapEvent>()), Times.Never());

        // A event should be added now, because lap number has changed from 1 to 2
        var gameData3 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    Position = 2,
                    CarNumber = "108",
                    IsPlayer = false,
                    CurrentLap = 2,
                    CurrentSector = 1,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4120000")
                },
                new TestableOpponent
                {
                    Position = 1,
                    CarNumber = "107",
                    IsPlayer = true,
                    CurrentLap = 2,
                    CurrentSector = 1,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes
                    {
                        FullLap = TimeSpan.Parse("00:01:30.1040000")
                    }
                }
            ]
        };
        // The last lap should be added, therefore 2 - 1 = 1
        PlayerFinishedLapEvent expectedEvent = new("testgame_testtrack", 1, TimeSpan.Parse("00:01:30.1040000"));
        processor.Run(gameData3);
        mockRaceEventHandler.Verify(m => m.AddEvent(expectedEvent), Times.Once());

        // lap hasn't changed, no new event
        processor.Run(gameData3);
        mockRaceEventHandler.Verify(m => m.AddEvent(It.IsAny<PlayerFinishedLapEvent>()), Times.Once());
    }

    [Fact]
    public void TestUpdateCurrentLapTimeInLapEventStore()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var mockEntryProgressStore = new Mock<IEntryProgressStore>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, mockEntryProgressStore.Object, "testgame", "testgame_track");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
            new TestableOpponent
                {
                    IsPlayer = true,
                    CurrentLap = 2,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.4100000"),
                    LastTimes = new TestableSectorTimes {}
                }
            ]
        };
        processor.Run(gameData);
        mockRaceEventHandler.Verify(m => m.SetCurrentLapTime(TimeSpan.Parse("00:00:01.4100000")), Times.Once());

        gameData.Opponents[0].CurrentLapTime = TimeSpan.Parse("00:01:20.1930000");
        processor.Run(gameData);
        mockRaceEventHandler.Verify(m => m.SetCurrentLapTime(It.IsAny<TimeSpan>()), Times.Exactly(2));
        mockRaceEventHandler.Verify(m => m.SetCurrentLapTime(TimeSpan.Parse("00:01:20.1930000")), Times.Once());
    }

    [Fact]
    public void TestProcessEntries()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var mockEntryProgressStore = new Mock<IEntryProgressStore>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, mockEntryProgressStore.Object, "testgame", "testgame_track");

        var gameData1 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    CarNumber = "109",
                    Position = 1,
                    CurrentLap = 3,
                    IsPlayer = false,
                },
                new TestableOpponent
                {
                    CarNumber = "110",
                    Position = 2,
                    CurrentLap = 2,
                    IsPlayer = false,
                },
                new TestableOpponent
                {
                    CarNumber = "107",
                    Position = 3,
                    CurrentLap = 1,
                    IsPlayer = true,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.3090000"),
                    LastTimes = new TestableSectorTimes {}
                }
            ]
        };

        // for the first time the old data of the entries should be null
        processor.Run(gameData1);

        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<FastestFragmentTimesStore>(),
                It.IsAny<IEntryProgressStore>()
            ),
            Times.Exactly(3)
        );

        // CarNumber 109
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                gameData1.Opponents[0],
                null,
                null,
                null,
                It.IsAny<FastestFragmentTimesStore>(),
                It.IsAny<IEntryProgressStore>()
            ),
            Times.Once()
        );

        // CarNumber 110
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                gameData1.Opponents[1],
                null,
                gameData1.Opponents[0],
                gameData1.Opponents[0],
                It.IsAny<FastestFragmentTimesStore>(),
                It.IsAny<IEntryProgressStore>()
            ),
            Times.Once()
        );

        // CarNumber 107
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                gameData1.Opponents[2],
                null,
                gameData1.Opponents[0],
                gameData1.Opponents[1],
                It.IsAny<FastestFragmentTimesStore>(),
                It.IsAny<IEntryProgressStore>()
            ),
            Times.Once()
        );

        // Data for the second run
        var gameData2 = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    CarNumber = "107",
                    Position = 1,
                    CurrentLap = 2,
                    IsPlayer = true,
                    CurrentSector = 3,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.3150000"),
                    LastTimes = new TestableSectorTimes {}
                },
                new TestableOpponent
                {
                    CarNumber = "108",
                    Position = 2,
                    CurrentLap = 2,
                    IsPlayer = false,
                },
                new TestableOpponent
                {
                    CarNumber = "109",
                    Position = 3,
                    CurrentLap = 4,
                    IsPlayer = false,
                }
            ]
        };

        // for the second time the old data of the entries should be filled now
        mockRaceEntryProcessor.Invocations.Clear();
        processor.Run(gameData2);

        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<FastestFragmentTimesStore>(),
                It.IsAny<IEntryProgressStore>()
            ),
            Times.Exactly(3)
        );

        // CarNumber 107
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                gameData2.Opponents[0],
                gameData1.Opponents[2],
                null,
                null,
                It.IsAny<FastestFragmentTimesStore>(),
                It.IsAny<IEntryProgressStore>()
            ),
            Times.Once()
        );

        // CarNumber 108 doesn't exist in first data
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                gameData2.Opponents[1],
                null,
                gameData2.Opponents[0],
                gameData2.Opponents[0],
                It.IsAny<FastestFragmentTimesStore>(),
                It.IsAny<IEntryProgressStore>()
            ),
            Times.Once()
        );

        // CarNumber 109
        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                gameData2.Opponents[2],
                gameData1.Opponents[0],
                gameData2.Opponents[0],
                gameData2.Opponents[1],
                It.IsAny<FastestFragmentTimesStore>(),
                It.IsAny<IEntryProgressStore>()
            ),
            Times.Once()
        );
    }

    [Fact]
    public void TestShouldThrowWhenPlayerDataCannotBeFound()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var mockEntryProgressStore = new Mock<IEntryProgressStore>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, mockEntryProgressStore.Object, "testgame", "testgame_track");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Race",
            Opponents = [
                new TestableOpponent
                {
                    CarNumber = "107",
                    Position = 1,
                    CurrentLap = 2,
                    CurrentSector = 1,
                    IsPlayer = false,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.3150000")
                },
                new TestableOpponent
                {
                    CarNumber = "108",
                    Position = 2,
                    CurrentLap = 2,
                    CurrentSector = 1,
                    IsPlayer = false,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.3170000")
                }
            ]
        };

        Assert.Throws<Exception>(() => processor.Run(gameData));
    }

    [Fact]
    public void TestPrepareCustomScoring()
    {
        var mockPropertyManager = new Mock<IPropertyManager>();
        var mockRaceEventHandler = new Mock<IRaceEventHandler>();
        var mockRaceEntryProcessor = new Mock<IRaceEntryProcessor>();
        var mockEntryProgressStore = new Mock<IEntryProgressStore>();
        var processor = new GameProcessor(mockPropertyManager.Object, mockRaceEventHandler.Object, mockRaceEntryProcessor.Object, mockEntryProgressStore.Object, "testgame", "testgame_track");

        var gameData = new TestableGameData
        {
            GameRunning = true,
            GameName = "Testgame",
            TrackName = "Testtrack",
            SessionName = "Qualifying",
            Opponents = [
                new TestableOpponent
                {
                    CarNumber = "107",
                    Position = 2,
                    CurrentLap = 2,
                    CurrentSector = 1,
                    TrackPositionPercent = 0.831,
                    IsPlayer = true,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.3150000"),
                    LastTimes = new TestableSectorTimes {}
                },
                new TestableOpponent
                {
                    CarNumber = "108",
                    Position = 4,
                    CurrentLap = 2,
                    CurrentSector = 1,
                    TrackPositionPercent = 0.766,
                    IsPlayer = false,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.9880000")
                },
                new TestableOpponent
                {
                    CarNumber = "109",
                    Position = 1,
                    CurrentLap = 2,
                    CurrentSector = 2,
                    TrackPositionPercent = 0.899,
                    IsPlayer = false,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.3020000")
                },
                new TestableOpponent
                {
                    CarNumber = "110",
                    Position = 3,
                    CurrentLap = 2,
                    CurrentSector = 1,
                    TrackPositionPercent = 0.791,
                    IsPlayer = false,
                    CurrentLapTime = TimeSpan.Parse("00:00:01.8550000")
                }
            ]
        };

        // Shouldn't fill custom progress store when session type is not 'Race'
        mockEntryProgressStore.Setup(m => m.UseCustomGapCalculation()).Returns(true);
        processor.Run(gameData);
        mockEntryProgressStore.Verify(m => m.AddIfNotAlreadyExists(It.IsAny<EntryProgress>()), Times.Never());

        // Shouldn't fill custom progress store when it's disabled...
        gameData.SessionName = "Race";
        mockEntryProgressStore.Setup(m => m.UseCustomGapCalculation()).Returns(false);
        processor.Run(gameData);
        processor.Run(gameData); // we have to call it twice, because the first time only the session id change will be handled
        mockEntryProgressStore.Verify(m => m.AddIfNotAlreadyExists(It.IsAny<EntryProgress>()), Times.Never());

        // Now it should be used
        mockRaceEntryProcessor.Invocations.Clear();
        mockEntryProgressStore.Setup(m => m.UseCustomGapCalculation()).Returns(true);
        mockEntryProgressStore.Setup(m => m.GetEntryIdsSortedByProgress()).Returns(["107", "110", "108", "109"]);
        mockRaceEventHandler.Setup(m => m.GetElapsedSessionTime()).Returns(TimeSpan.Parse("00:04:46.1090000"));

        processor.Run(gameData);
        mockEntryProgressStore.Verify(m => m.AddIfNotAlreadyExists(It.IsAny<EntryProgress>()), Times.Exactly(4));
        mockEntryProgressStore.Verify(m => m.AddIfNotAlreadyExists(new EntryProgress("107", 2, 24, TimeSpan.Parse("00:04:46.1090000"), 2)), Times.Once);
        mockEntryProgressStore.Verify(m => m.AddIfNotAlreadyExists(new EntryProgress("108", 2, 22, TimeSpan.Parse("00:04:46.1090000"), 4)), Times.Once);
        mockEntryProgressStore.Verify(m => m.AddIfNotAlreadyExists(new EntryProgress("109", 2, 26, TimeSpan.Parse("00:04:46.1090000"), 1)), Times.Once);
        mockEntryProgressStore.Verify(m => m.AddIfNotAlreadyExists(new EntryProgress("110", 2, 23, TimeSpan.Parse("00:04:46.1090000"), 3)), Times.Once);

        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                It.IsAny<int>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<TestableOpponent>(),
                It.IsAny<FastestFragmentTimesStore>(),
                mockEntryProgressStore.Object
            ),
            Times.Exactly(4)
        );

        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                1,
                gameData.Opponents[0],
                It.IsAny<TestableOpponent>(),
                null,
                null,
                It.IsAny<FastestFragmentTimesStore>(),
                mockEntryProgressStore.Object
            ),
            Times.Once()
        );

        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                2,
                gameData.Opponents[3],
                It.IsAny<TestableOpponent>(),
                gameData.Opponents[0],
                gameData.Opponents[0],
                It.IsAny<FastestFragmentTimesStore>(),
                mockEntryProgressStore.Object
            ),
            Times.Once()
        );

        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                3,
                gameData.Opponents[1],
                It.IsAny<TestableOpponent>(),
                gameData.Opponents[0],
                gameData.Opponents[3],
                It.IsAny<FastestFragmentTimesStore>(),
                mockEntryProgressStore.Object
            ),
            Times.Once()
        );

        mockRaceEntryProcessor.Verify(
            m => m.Process(
                "testgame_testtrack",
                SessionType.Race,
                4,
                gameData.Opponents[2],
                It.IsAny<TestableOpponent>(),
                gameData.Opponents[0],
                gameData.Opponents[1],
                It.IsAny<FastestFragmentTimesStore>(),
                mockEntryProgressStore.Object
            ),
            Times.Once()
        );
    }
}
